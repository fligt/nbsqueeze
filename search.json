[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to nbsqueeze",
    "section": "",
    "text": "Creating plots in Jupyter notebooks is great for exploring your data. The images that are generated by your plotting code are conveniently stored within the notebook file as base64 encoded text strings. A downside to this approach is that Jupyter notebooks with many plots easily become quite large. Uploading such large notebook files to github and subsequent testing and rendering of such notebooks to produce documentation soon becomes intolerably slow…\nThis small Python package nbsqueeze is created to reduce the file size of Jupyter notebooks by extracting embedded images as separate image files. This open source package available via the Python Package index https://pypi.org.\nFor documentation and source code see github.",
    "crumbs": [
      "Welcome to nbsqueeze"
    ]
  },
  {
    "objectID": "extract.html",
    "href": "extract.html",
    "title": "Squeeze your notebooks",
    "section": "",
    "text": "Here is a small example to show how you can run nbsqueeze from a notebook. Let’s first create an in-line plot with matplotlib.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nx = np.arange(40)\ny = np.cos(x)\n\nfig, ax = plt.subplots(figsize=[2, 3])\nax.plot(x, y, 'g')\n\n..\n\n\nThe output plot image that we see above is encoded as a long base64 encoded png string, somewhere in this notebook. If you open this notebook file with a text editor you would see this corresponding json code for the image in the cell above:\n{\n \"data\": {\n  \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAAK...A.VERY.LONG.STRING.HERE...\",\n  \"text/plain\": [\n   \"&lt;Figure size 144x216 with 1 Axes&gt;\"\n  ]\n },\nWe can use the squeeze_this_nb function to extract the very long base64 png string as above, save the image as a png file in the ./images/ folder, and replace the long string with a short link to the png file.\n\nfrom nbsqueeze import squeeze_this_nb\n\n\nsqueeze_this_nb()\n\nIf we would now look at the json code of this notebook with a text editor, one would find the following updated json code:\n{\n \"data\": {\n  \"text/html\": [\n   \"..\",\n   \"&lt;img src=\\\"./images/00_extract_361824cd7e.png\\\"&gt;\"\n  ]\n },\nMuch shorter! This means my notebook file size is much smaller. If we check the file system, the corresponding png image file is present in the ./images/ sub folder:\n.\n├── 00_extract.ipynb\n└── images\n    └── 00_extract_361824cd7e.png\n\nsource\n\nsqueeze_this_nb\n\n squeeze_this_nb (nb_path=None, overwrite=True, verbose=False)\n\nExtract figure png strings from notebook nb_path.\nIf nb_path is None, current notebook is used.\n\nsource\n\n\nreplace_strings\n\n replace_strings (nb_path, url_list, overwrite=True, verbose=False)\n\nReplace base64 png strings with links.\n\nsource\n\n\nexport_pngs\n\n export_pngs (nb_path, cell_pngs, imdir_path)\n\nSave base64 png strings from cell_pngs as png images in img_dir.\n\nsource\n\n\nmake_imdir\n\n make_imdir (nb_path)\n\nCreate standard image subdirectory ‘images’ in current directory for notebook file nb_path.\nReturns: imdir_path\n\nsource\n\n\nfind_png_strings\n\n find_png_strings (nb_path)\n\nFind cells with inline base64 image/png strings in notebook_file.\nReturns: [[cell_idx, md5, base64_string], …]",
    "crumbs": [
      "Squeeze your notebooks"
    ]
  },
  {
    "objectID": "example-notebook.html",
    "href": "example-notebook.html",
    "title": "A mini example notebook with two plots",
    "section": "",
    "text": "Another notebook with an inline and an interactive plot.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nBelow is a code cell with with a simple tiny embedded inline png image.\n\nx = np.arange(20)\ny = np.cos(x)\n\nfig, ax = plt.subplots(figsize=[2, 2])\nax.plot(x, y, 'b');\n\n..\n\n\nInteractive images produced with the ipympl package are slightly complicated to deal with. Here is an example how to deal with that. First active the interactive plots with the command:\nI now generate the same plot as above, and zoom in.\n\nfig, ax = plt.subplots(figsize=[2, 2])\nax.plot(x, y, 'b');\n\nAnd save the zoom state into an inline plot with:\n#|echo: false \nplt.gcf()\n\n\n..",
    "crumbs": [
      "A mini example notebook with two plots"
    ]
  },
  {
    "objectID": "console-command.html",
    "href": "console-command.html",
    "title": "Run nbsqueeze from the command line",
    "section": "",
    "text": "For all my coding work, I use the awesome Python package nbdev. Thanks to this software learned how to efficiently use Github and how to publish my own Python packages (like this one!) with beautiful documentation all rendered from a bunch of Jupyter notebooks. Ultimate freedom of expression! Now, I am pushing the nbdev machinery to it’s limits due to the large amount of plots with high resolution images that I need to embed in my documentation.\nIn my work flow, I need to squeeze the figures out of all Jupyter notebooks in a notebooks project folder simultaneously with a single command. For this reason I created a console command nbsqueeze that can executed from the terminal (a.k.a. command prompt) in the root folder of a project. Simply type this:\n$ nbsqueeze\nThe command assumes the your current working directory contains a folder named either nbs or notebooks that contain all your Jupyter notebooks. The command first identifies all figure images that have already been created, and then deletes all other obsolete image files. Subsequently it squeezes all figures from all notebooks.\n\nsource\n\nsqueeze\n\n squeeze (glob_ptrn='n*b*s/*.ipynb', verbose=False, overwrite=True)\n\nExtract all embedded images from all notebooks in notebooks subdirectory.\n\nsource\n\n\nclean_imdir\n\n clean_imdir (nb_path, verbose=False)\n\nRemove orphant image files corresponding to notebook nb_path that are not linked.\n\nsource\n\n\nfind_links\n\n find_links (nb_path)\n\nFind existing links to png images in notebook nb_path.",
    "crumbs": [
      "Run `nbsqueeze` from the command line"
    ]
  }
]